{% extends 'base.html.twig' %}

{% block title %}Exercice{% endblock %}

{% block stylesheets %}
    <style>
        /* Base Styles */
    .form-container {
        max-width: 900px;
        margin: 2rem auto;
        padding: 2.5rem;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    h2 {
        color: #2c3e50;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: 600;
        font-size: 2rem;
    }

    /* Draggable Elements Container */
    .draggable-elements {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background-color: #f8f9fa;
        border-radius: 10px;
    }

    /* Draggable Items */
    .draggable-item {
        padding: 0.8rem 1.5rem;
        margin: 0.3rem;
        color: white;
        border-radius: 8px;
        cursor: grab;
        user-select: none;
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        font-size: 1rem;
        font-weight: 500;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);
        position: relative;
        overflow: hidden;
        z-index: 1;
    }

    .draggable-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0));
        z-index: -1;
    }

    .draggable-item:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
    }

    .draggable-item.dragging {
        transform: scale(0.98);
        opacity: 0.8;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12);
        cursor: grabbing;
    }

    /* Drop Zone */
    .drop-zone {
        border: 2px dashed #adb5bd;
        border-radius: 12px;
        padding: 2rem;
        margin: 2rem 0;
        min-height: 150px;
        background-color: #f8f9fa;
        transition: all 0.3s ease;
        position: relative;
        display: flex;
        flex-wrap: wrap;
        align-items: flex-start;
        gap: 0.8rem;
    }

    .drop-zone > p {
        width: 100%;
        text-align: center;
        color: #6c757d;
        font-size: 1.1rem;
        margin: 0;
        padding: 1rem 0;
    }

    .drop-zone.highlight {
        border-color: #4cc9f0;
        background-color: rgba(76, 201, 240, 0.05);
        animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
        0% { border-color: #4cc9f0; }
        50% { border-color: #4895ef; }
        100% { border-color: #4cc9f0; }
    }

    /* Items in Drop Zone */
    .drop-zone .draggable-item {
        cursor: default;
        padding-right: 2.5rem;
        position: relative;
    }

    .drop-zone .draggable-item:hover {
        transform: none;
    }

    .drop-zone .draggable-item span {
        position: absolute;
        right: 0.8rem;
        top: 50%;
        transform: translateY(-50%);
        font-size: 1.2rem;
        color: rgba(255, 255, 255, 0.8);
        cursor: pointer;
        transition: all 0.2s;
    }

    .drop-zone .draggable-item span:hover {
        color: white;
        transform: translateY(-50%) scale(1.2);
    }

    /* Submit Button */
    .submit-btn {
        display: block;
        width: 220px;
        margin: 2.5rem auto 0;
        padding: 0.9rem;
        background: linear-gradient(135deg, #2ecc71, #27ae60);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1.05rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        letter-spacing: 0.5px;
    }

    .submit-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 7px 14px rgba(0, 0, 0, 0.15);
        background: linear-gradient(135deg, #27ae60, #2ecc71);
    }

    .submit-btn:active {
        transform: translateY(-1px);
    }

    /* Response Message */
    .response-message {
        text-align: center;
        margin-top: 1.5rem;
        padding: 1.2rem;
        border-radius: 8px;
        display: none;
        animation: fadeIn 0.5s ease;
        font-weight: 500;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .response-message.success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .response-message.error {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    /* Hidden Elements */
    .hidden-field {
        display: none;
    }

    .hidden-drag {
        visibility: hidden;
    }

    /* Responsive Adjustments */
    @media (max-width: 768px) {
        .form-container {
            padding: 1.5rem;
            margin: 1rem;
        }
        
        .draggable-elements {
            padding: 1rem;
        }
        
        .draggable-item {
            padding: 0.7rem 1.2rem;
            font-size: 0.9rem;
        }
    }
    </style>
{% endblock %}

{% block body %}
    {% include 'include/navbar.html.twig' %}

    <div class="form-container">
        <h2>{{ exercice.nom }}</h2>

        <h4>{{ exercice.description }}</h4>

        {# Éléments draggables #}
        <div class="draggable-elements">
            {% for bloc in blocs|shuffle %}
            <div class="draggable-item"
            style="background-color: {{ bloc.type.color }};"
            data-value="{{ bloc.id }}"
                 draggable="true">
                {{ bloc.valeur }}
            </div>
            {% endfor %}
        </div>

        {# Zone de dépôt #}
        <div class="drop-zone" id="dropZone">
            <p>Déposez les réponses ici</p>
        </div>

        <button type="button" class="submit-btn" id="submitBtn">Envoyer</button>

        <div id="responseMessage" class="response-message"></div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('turbo:load', function() {
            const draggableItems = document.querySelectorAll('.draggable-item');
            const dropZone = document.getElementById('dropZone');
            const submitBtn = document.getElementById('submitBtn');
            const responseMessage = document.getElementById('responseMessage');
            let selectedValues = [];
            let responseList = [];

            // Initialize drag and drop
            draggableItems.forEach(item => {
                item.addEventListener('dragstart', dragStart);
                item.addEventListener('dragend', dragEnd);
            });

            dropZone.addEventListener('dragover', dragOver);
            dropZone.addEventListener('dragenter', dragEnter);
            dropZone.addEventListener('dragleave', dragLeave);
            dropZone.addEventListener('drop', drop);

            // Submit handler
            submitBtn.addEventListener('click', submitForm);

            function dragStart(e) {
                this.classList.add('dragging');
                e.dataTransfer.setData('text/plain', this.dataset.value);
            }

            function dragEnd() {
                this.classList.remove('dragging');
                this.style.display = 'inline-block';
            }

            function dragOver(e) {
                e.preventDefault();
            }

            function dragEnter(e) {
                e.preventDefault();
                this.classList.add('highlight');
            }

            function dragLeave() {
                this.classList.remove('highlight');
            }

            function drop(e) {
                e.preventDefault();
                dropZone.classList.remove('highlight');

                const value = e.dataTransfer.getData('text/plain');

                const draggedItem = Array.from(document.querySelectorAll('.draggable-item')).find(item => item.dataset.value === value);

                if (draggedItem && !selectedValues.includes(value)) {
                    const clone = draggedItem.cloneNode(true);
                    clone.setAttribute('draggable', 'false');

                    const removeBtn = document.createElement('span');
                    removeBtn.innerHTML = ' ×';
                    removeBtn.style.cssText = 'cursor: pointer; margin-left: 10px;';
                    removeBtn.addEventListener('click', function() {
                        clone.remove();
                        selectedValues = selectedValues.filter(v => v !== value);
                        document.querySelector(`.draggable-item[data-value="${value}"]`).style.display = 'inline-block';
                        updateFormFields();
                        if(selectedValues.length === 0) {
                            // réaffiche le message "Déposez ici" si aucune réponse n'est sélectionnée
                            const message = document.createElement('p');
                            message.textContent = 'Déposez les réponses ici';
                            dropZone.appendChild(message);
                        }
                    });

                    clone.appendChild(removeBtn);
                    dropZone.querySelector('p')?.remove(); // enlève le message "Déposez ici" s'il est là
                    dropZone.appendChild(clone);
                    selectedValues.push(value);
                    updateFormFields();
                }
            }

            function updateFormFields() {
                // Get all blocs on thz drop zone to put them on the ResponseList in the order
                // they were dropped
                const dropZoneItems = dropZone.querySelectorAll('.draggable-item');
                responseList = Array.from(dropZoneItems).map(item => parseInt(item.dataset.value));
                // Create hidden fields for each selected value
                const hiddenFields = dropZone.querySelectorAll('.hidden-field');
                hiddenFields.forEach(field => field.remove());
                responseList.forEach(value => {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'response[]';
                    input.value = value;
                    input.classList.add('hidden-field');
                    dropZone.appendChild(input);
                });

                console.log('Response List:', responseList);
            }



            function submitForm() {
                if (selectedValues.length === 0) {
                    showResponse('Veuillez sélectionner au moins une réponse', 'error');
                    return;
                }

                fetch('/exercice/{{ exercice.id }}', {
                    method: 'POST',
                    body: JSON.stringify({
                        response: responseList
                    }),
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showResponse(data.message, 'success');
                        } else {
                            showResponse(data.message || 'Une erreur est survenue', 'error');
                        }
                    })
                    .catch(error => {
                        showResponse('Erreur de connexion', 'error');
                        console.error('Error:', error);
                    });
            }

            function showResponse(message, type) {
                responseMessage.textContent = message;
                responseMessage.className = `response-message ${type}`;
                responseMessage.style.display = 'block';

                setTimeout(() => {
                    responseMessage.style.opacity = '0';
                    setTimeout(() => {
                        responseMessage.style.display = 'none';
                        responseMessage.style.opacity = '1';
                    }, 500);
                }, 3000);
            }
        });
    </script>
{% endblock %}